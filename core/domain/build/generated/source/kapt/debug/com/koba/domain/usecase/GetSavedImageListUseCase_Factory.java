// Generated by Dagger (https://dagger.dev).
package com.koba.domain.usecase;

import com.koba.data.repository.StorageRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata
@QualifierMetadata("com.koba.base.di.DispatcherModule.DispatcherDefault")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetSavedImageListUseCase_Factory implements Factory<GetSavedImageListUseCase> {
  private final Provider<StorageRepository> storageRepositoryProvider;

  private final Provider<CoroutineDispatcher> defaultDispatcherProvider;

  public GetSavedImageListUseCase_Factory(Provider<StorageRepository> storageRepositoryProvider,
      Provider<CoroutineDispatcher> defaultDispatcherProvider) {
    this.storageRepositoryProvider = storageRepositoryProvider;
    this.defaultDispatcherProvider = defaultDispatcherProvider;
  }

  @Override
  public GetSavedImageListUseCase get() {
    return newInstance(storageRepositoryProvider.get(), defaultDispatcherProvider.get());
  }

  public static GetSavedImageListUseCase_Factory create(
      Provider<StorageRepository> storageRepositoryProvider,
      Provider<CoroutineDispatcher> defaultDispatcherProvider) {
    return new GetSavedImageListUseCase_Factory(storageRepositoryProvider, defaultDispatcherProvider);
  }

  public static GetSavedImageListUseCase newInstance(StorageRepository storageRepository,
      CoroutineDispatcher defaultDispatcher) {
    return new GetSavedImageListUseCase(storageRepository, defaultDispatcher);
  }
}
