// Generated by Dagger (https://dagger.dev).
package com.koba.domain.usecase;

import com.koba.data.repository.StorageRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ContainImageUrlUseCase_Factory implements Factory<ContainImageUrlUseCase> {
  private final Provider<StorageRepository> repositoryProvider;

  public ContainImageUrlUseCase_Factory(Provider<StorageRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public ContainImageUrlUseCase get() {
    return newInstance(repositoryProvider.get());
  }

  public static ContainImageUrlUseCase_Factory create(
      Provider<StorageRepository> repositoryProvider) {
    return new ContainImageUrlUseCase_Factory(repositoryProvider);
  }

  public static ContainImageUrlUseCase newInstance(StorageRepository repository) {
    return new ContainImageUrlUseCase(repository);
  }
}
