// Generated by Dagger (https://dagger.dev).
package com.koba.data_implement.di;

import com.koba.data.service.RetrofitService;
import com.koba.network.RetrofitNetwork;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_Companion_ProvideRetrofitServiceFactory implements Factory<RetrofitService> {
  private final Provider<RetrofitNetwork> retrofitNetworkProvider;

  public DataModule_Companion_ProvideRetrofitServiceFactory(
      Provider<RetrofitNetwork> retrofitNetworkProvider) {
    this.retrofitNetworkProvider = retrofitNetworkProvider;
  }

  @Override
  public RetrofitService get() {
    return provideRetrofitService(retrofitNetworkProvider.get());
  }

  public static DataModule_Companion_ProvideRetrofitServiceFactory create(
      Provider<RetrofitNetwork> retrofitNetworkProvider) {
    return new DataModule_Companion_ProvideRetrofitServiceFactory(retrofitNetworkProvider);
  }

  public static RetrofitService provideRetrofitService(RetrofitNetwork retrofitNetwork) {
    return Preconditions.checkNotNullFromProvides(DataModule.Companion.provideRetrofitService(retrofitNetwork));
  }
}
