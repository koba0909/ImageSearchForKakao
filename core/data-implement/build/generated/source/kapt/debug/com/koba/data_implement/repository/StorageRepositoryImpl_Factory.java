// Generated by Dagger (https://dagger.dev).
package com.koba.data_implement.repository;

import com.koba.data_implement.provider.ImageSharedPreferenceProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata
@QualifierMetadata("com.koba.base.di.DispatcherModule.DispatcherIO")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class StorageRepositoryImpl_Factory implements Factory<StorageRepositoryImpl> {
  private final Provider<ImageSharedPreferenceProvider> imageSharedPreferenceProvider;

  private final Provider<CoroutineDispatcher> ioDispatcherProvider;

  public StorageRepositoryImpl_Factory(
      Provider<ImageSharedPreferenceProvider> imageSharedPreferenceProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    this.imageSharedPreferenceProvider = imageSharedPreferenceProvider;
    this.ioDispatcherProvider = ioDispatcherProvider;
  }

  @Override
  public StorageRepositoryImpl get() {
    return newInstance(imageSharedPreferenceProvider.get(), ioDispatcherProvider.get());
  }

  public static StorageRepositoryImpl_Factory create(
      Provider<ImageSharedPreferenceProvider> imageSharedPreferenceProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    return new StorageRepositoryImpl_Factory(imageSharedPreferenceProvider, ioDispatcherProvider);
  }

  public static StorageRepositoryImpl newInstance(
      ImageSharedPreferenceProvider imageSharedPreferenceProvider,
      CoroutineDispatcher ioDispatcher) {
    return new StorageRepositoryImpl(imageSharedPreferenceProvider, ioDispatcher);
  }
}
